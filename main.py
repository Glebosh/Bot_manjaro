import telegram
import logging
from settings import settings

from telegram import *
from telegram.ext import *

TOKEN = settings.secret_token

PEPE = (f'‚¢†‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†¨‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†¨‚†¨‚†≠‚†•‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚°Ñ\n'
f'‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚°¥‚†∂‚¢∂‚£§‚†Ä‚†Ä‚£∑‚°Ü‚†Ä‚¢Ä‚£¥‚†ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á\n'
f'‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚†ã‚†Ä‚†Ä‚†Ä‚†à‚£∑‚†Ä‚¢∏‚£á‚£¥‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∑\n'
f'‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†Ä‚¢∏‚°ü‚†ô‚¢∑‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø\n'
f'‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†ø‚£Ñ‚£Ä‚£†‚°æ‚†É‚†Ä‚£º‚°á‚†Ä‚†à‚†ª‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø\n'
f'‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ì‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø\n'
f'‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°Ä‚†Ä‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø\n'
f'‚£ø‚†Ä‚†Ä‚£ø‚°õ‚£õ‚†õ‚¢≥‚°§‚†Ä‚£†‚°æ‚†õ‚†õ‚†ª‚£¶‚°Ä‚†Ä‚£∞‚†û‚†õ‚†õ‚†≥‚£Ñ‚†Ä‚†Ä‚°ø‚°á‚†Ä‚†Ä‚¢Ä‚£æ‚°á‚†Ä‚¢∏‚†õ‚†õ‚†õ‚†õ‚†É‚£§‚£ø‚†õ‚†õ‚†õ‚†≥‚°Ñ‚†Ä‚†Ä‚°ß\n'
f'‚£ø‚†Ä‚†Ä‚£ø‚£ß‚£Ø‚£§‚£æ‚†Å‚†Ä‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ó‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚°Ü‚†Ä‚°á‚¢π‚°Ñ‚†Ä‚£º‚¢π‚°á‚†Ä‚¢∏‚£¶‚£§‚£§‚£•‚†Ñ‚†ò‚£ø‚£Ä‚£Ä‚£Ä‚£¥‚†á‚†Ä‚†Ä‚°ó\n'
f'‚£ø‚†Ä‚†Ä‚£ø‚°Ä‚†Ä‚†Ä‚†ô‚°è‚†Ä‚£ß‚°Ä‚†Ä‚†Ä‚†Ä‚£∏‚°è‚†ò‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚†á‚†Ä‚°á‚†à‚£∑‚£∏‚†á‚¢∏‚°á‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†â‚†ô‚†ª‚£Ö‚†Ä‚†Ä‚†Ä‚£ø\n'
f'‚£ø‚†Ä‚†Ä‚†ª‚†∑‚£∂‚†∂‚†ö‚†Å‚†Ä‚†à‚†õ‚†∂‚†∂‚†û‚†ã‚†Ä‚†Ä‚†à‚†ì‚†∂‚†∂‚†û‚†Å‚†Ä‚†Ä‚†á‚†Ä‚†∏‚†ü‚†Ä‚¢∏‚°á‚†Ä‚†∏‚°∂‚†∂‚†∂‚†∂‚†¶‚†Ä‚†ø‚†Ä‚†Ä‚†Ä‚†ò‚†∑‚°Ñ‚†Ä‚£ø\n'
f'‚£ø‚¢§‚£¶‚£§‚£¥‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£∂‚£¶‚£§‚£¥‚£¶‚£§‚£§‚£§‚£§‚£§‚£§‚£¥‚£§‚£§‚£§‚£§‚£∂‚£∂‚£¶‚£∂‚£§‚£¶‚°¥‚£§‚£∂‚£∂‚†∂‚£∂‚£∂‚£¶‚£§‚£§‚£§‚£§‚£§‚£¶‚£¥‚£§‚°ø\n'
f'‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ω‚¢ø‚°ü‚†Ä‚£º‚°ü‚£°‚£æ‚°Ø‚†ø‚†õ‚†õ‚†ª‚¢Ø‚£ç‚°Å‚¢Ä‚£©‚†ü‚£´‚°•‚†ø‚†∑‚†ø‚†ø‚£å‚°ª‚£ü‚£ø‚£≠‚°ø‚¢∑‚£Ñ‚†à‚†ª‚£Æ‚£∑‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n'
f'‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚£ø‚£ø‚†Ä‚¢∞‚£è‚£º‚£ª‚°µ‚†ü‚†â‚¢Ä‚£à‚£â‚£õ‚£∂‚£¨‚£ø‚†æ‚†ã‚¢Ä‚£Ä‚£†‚°§‚£§‚£§‚£§‚†ø‚£æ‚£ø‚£∑‚£ô‚†∑‚£ù‚¢∑‚°Ä‚†∏‚£û‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n'
f'‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚°ø‚£ø‚†Ä‚£ø‚£∂‚†ü‚†ã‚£†‚†¥‚†ö‚†ã‚†Å‚†Ä‚†Ä‚¢â‚£ª‚°ø‚†Ä‚†û‚†ã‚¢â‚£¥‚†ø‚†ã‚£â‚°§‚¢§‚£∂‚°ø‚†ø‚†Ω‚£∑‚°ú‚£ß‚£∑‚†Ä‚£ø‚£º‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n'
f'‚°É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚£ø‚†Ä‚£ø‚°á‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚£†‚£¥‚£æ‚£ø‚£ç‚£â‚£∂‚†∂‚†∂‚†Ø‚£Ö‚£†‚†æ‚†ã‚£ø‚£ü‚£ø‚¢ø‚£¶‚°Ä‚†Ä‚¢π‚°º‚£ø‚†Ä‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n'
f'‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚£ø‚°Å‚£ø‚°á‚†Ä‚†Ä‚¢Ä‚£†‚°¥‚¢õ‚£Ω‚†û‚¢°‚£û‚£π‚°ø‚†ª‚£ß‚°Ñ‚†Ä‚°æ‚†Å‚†Ä‚†Ä‚£ø‚£ø‚¢ø‚£∂‚£ø‚£ß‚£§‚£æ‚£∑‚°ü‚†Ä‚¢∏‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n'
f'‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚£ø‚°Å‚£ø‚£á‚†Ä‚†Ä‚†ã‚†â‚¢æ‚£è‚†Ä‚†Ä‚¢∏‚£ø‚£è‚£ø‚£ø‚£ø‚£ß‚°¥‚†õ‚†¶‚†§‚†¥‚†ø‚†õ‚†õ‚†ã‚£â‚£Ω‚£ø‚£ø‚¢ª‚°á‚†Ä‚¢∏‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n'
f'‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚£ø‚†Ä‚¢∏‚£ø‚†Ä‚†Ä‚¢Ä‚£†‚£§‚£¨‚£Ω‚£∂‚£∂‚£ø‚£ü‚°õ‚†â‚£â‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£§‚£¥‚£∂‚†æ‚†ã‚¢Å‚£º‚£ø‚£ø‚†Ä‚†Ä‚¢∏‚£∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n'
f'‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚£ø‚†Ä‚†ò‚£ø‚°Ü‚¢∏‚£ü‚†Å‚††‚£§‚£§‚£å‚£â‚°â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚£â‚£â‚£≠‚£•‚£§‚£∂‚†∂‚†ö‚¢ª‚°ø‚£∑‚°ü‚†Ä‚†Ä‚£æ‚¢ª‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n'
f'‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚£ø‚†Ä‚†Ä‚¢ø‚£á‚†Ä‚†ô‚†ª‚†∑‚£∂‚£§‚£Ñ‚£à‚£â‚°â‚†â‚†â‚†â‚†â‚¢â‚£π‚£â‚£ã‚£Å‚£Ä‚£§‚£§‚£¥‚†æ‚¢ø‚°ø‚†ã‚†Ä‚†Ä‚£∞‚¢Ø‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n'
f'‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£á‚£ø‚†Ä‚†Ä‚†ò‚£ø‚£ß‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†â‚†õ‚†õ‚†õ‚†õ‚†õ‚†â‚†â‚†â‚†Ä‚†Ä‚¢Ä‚£Ä‚£†‚£∂‚£ø‚£Ñ‚£Ä‚°¥‚¢û‚°°‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n'
f'‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚£ü‚£ß‚°Ä‚†Ä‚†ò‚¢ø‚£ü‚†ø‚¢∂‚£§‚£Ñ‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£§‚£§‚£§‚£§‚£¥‚°æ‚†ø‚†õ‚†â‚†à‚£ø‚£ø‚¢ª‚°ñ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n'
f'‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚£ø‚£∑‚£Ñ‚†Ä‚¢Ä‚£ø‚†Ä‚†Ä‚†à‚†â‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†π‚†ã‚†Å‚†Ä‚†â‚†à‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢ø‚£ß‚£ô‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n'
f'‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°º‚£ø‚°ü‚†ª‚£∑‚£æ‚£ü‚†Ä‚†ê‚†Ä‚†Ä‚†Ä‚£†‚£§‚£§‚£§‚£§‚£§‚£§‚£Ñ‚£§‚£†‚°Ñ‚£Ä‚£Ä‚£§‚£§‚£Ñ‚†Ä‚†Ä‚†Ä‚¢ª‚£ø‚£ú‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n')

# print(PEPE)


#ERROR config
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)


#start handler
def start(update: Update, context: CallbackContext):
    """Sends a message with three inline buttons attached."""
    keyboard = [
        [
            InlineKeyboardButton("Picture", callback_data='1'),
            InlineKeyboardButton("Text", callback_data='2'),
        ],
        [
            InlineKeyboardButton("?", callback_data='3'),
            InlineKeyboardButton("next", callback_data='4')
        ],
    ]

    # button = [[KeyboardButton(text='Help')], [KeyboardButton(text='Pepe')]]

    # context.bot.send_message(chat_id=update.effective_chat.id, text='Welcome to my bot!', 
    # reply_markup=ReplyKeyboardMarkup(button))

    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text('Please choose:', reply_markup=reply_markup)


#echo handler
def echo(update: Update, context: CallbackContext):
    # context.bot.send_photo(chat_id=update.effective_chat.id, photo=open('/home/glebosh/workspace/tgbot/ec9.jpg', 'rb'))
    context.bot.send_message(chat_id=update.effective_chat.id, text=update.message.text)


#caps handler
def caps(update: Update, context: CallbackContext):
    text_caps = ' '.join(context.args).upper()
    context.bot.send_message(chat_id=update.effective_chat.id, text=text_caps)


#inline
def inline_caps(update: Update, context: CallbackContext):
    query = update.inline_query.query
    if not query:
        return
    results = []
    results.append(
        InlineQueryResultArticle(
            id=query.upper(),
            title='Caps',
            input_message_content=InputTextMessageContent(query.upper())
        )
    )
    context.bot.answer_inline_query(update.inline_query.id, results)

from telegram.ext import InlineQueryHandler


#unkown commands
def unknown(update: Update, context: CallbackContext):
    context.bot.send_message(chat_id=update.effective_chat.id, text="Sorry, I didn't understand that command.")


#Buttons
def button(update: Update, context: CallbackContext):
    """Parses the CallbackQuery and updates the message text."""
    query = update.callback_query

    # CallbackQueries need to be answered, even if no notification to the user is needed
    # Some clients may have trouble otherwise. See https://core.telegram.org/bots/api#callbackquery
    query.answer()

    if query.data == '1':
        context.bot.send_photo(chat_id=update.effective_chat.id, photo=open('/home/glebosh/workspace/tgbot/ec9.jpg', 'rb'))
    if query.data == '2':
        context.bot.send_message(chat_id=update.effective_chat.id, text='Hello Im bot. GIVE ME YOUR MONEY MOW!')
    if query.data == '3':
        button = [[KeyboardButton(text='Help')], [KeyboardButton(text='Pepe')]]
        context.bot.send_message(chat_id=update.effective_chat.id, text='WoW üòã', 
        reply_markup=ReplyKeyboardMarkup(button))
    if query.data == '4':
        keyboard = [
            InlineKeyboardButton("New Picture", callback_data='1'),
            InlineKeyboardButton("New Text", callback_data='2'),
        ],
        reply_markup = InlineKeyboardMarkup(keyboard)
        context.bot.send_message(chat_id=update.effective_chat.id, text='another page :)', reply_markup=reply_markup)


    query.edit_message_text(text=f"Selected option: {query.data}")


#Help
def help(update: Update, context: CallbackContext):
    commands = {'start': 'Starts programm with choice', 'caps ...': 'Reply with CAPS text'}

    context.bot.send_message(chat_id=update.effective_chat.id, text='/start: Starts programm with choice;\n/caps: Reply with CAPS text')


def main():
    bot = telegram.Bot(token=TOKEN)
    updater = Updater(token=TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    #Start
    dispatcher.add_handler(CommandHandler('start', start))

    #Echo
    echo_handler = MessageHandler(Filters.text & (~Filters.command) | Filters.photo & (~Filters.command), echo)
    dispatcher.add_handler(echo_handler)

    #Caps
    dispatcher.add_handler(CommandHandler('caps', caps))

    #Inline
    dispatcher.add_handler(InlineQueryHandler(inline_caps))

    #Button
    dispatcher.add_handler(CallbackQueryHandler(button))

    #Help
    dispatcher.add_handler(CommandHandler('help', help))

    #Unknown
    dispatcher.add_handler(MessageHandler(Filters.command, unknown))

    #strat polling
    updater.start_polling()


if __name__ == '__main__':
    main()


# bot.send_photo(chat_id='-705446959', photo=open('/home/glebosh/workspace/tgbot/ec9.jpg', 'rb'))
# print(bot.send_message(text='–ü—Ä–∏–≤–µ—Ç, —è —Ä–æ–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—Ç –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –º–∏—Ä!', chat_id='chat_id'))
